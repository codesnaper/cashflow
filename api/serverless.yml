#org: codesnaper
app: gallery-api
service: gallery-api
frameworkVersion: '3'

custom:
  accountTable: 'account-table-${sls:stage}'
  bankTable: 'bank-table-${sls:stage}'
  limitTable: 'limit-table-${sls:stage}'
  categoryTable: 'category-table-${sls:stage}'
  expenseTable: 'expense-table-${sls:stage}'
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      convertEmptyValues: true
    migration:
      dir: dest/migrations

package:
  individually: true

provider:
  httpApi:
    authorizers:
      someJwtAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.ap-south-1.amazonaws.com/ap-south-1_pvEuDVm63
  name: aws
  runtime: nodejs14.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ BankTable, Arn ]
            - Fn::GetAtt: [ AccountTbale, Arn ]
            - Fn::GetAtt: [ LimitTable, Arn ]
            - Fn::GetAtt: [ CategoryTable, Arn ]
            - Fn::GetAtt: [ ExpenseTable, Arn ]
  environment:
    ACCOUNT_TABLE: ${self:custom.accountTable}
    BANK_TABLE: ${self:custom.bankTable}
    LIMIT_TABLE: ${self:custom.limitTable}
    CATEGORY_TABLE: ${self:custom.categoryTable}
    EXPENSE_TABLE: ${self:custom.expenseTable}

functions:
  account:
    handler: src/account/controller.handler
    events:
      - httpApi:
          method: '*'
          path: /account/{param*}

  bank:
    handler: src/bank/controller.handler
    events:
      - httpApi:
          method: '*'
          path: /bank/{param*}

  limit:
    handler: src/limit/controller.handler
    events:
      - httpApi:
          method: '*'
          path: /limit/{param*}

  category:
    handler: src/category/controller.handler
    events:
      - httpApi:
          method: '*'
          path: /category/{param*}

  expense:
    handler: src/expense/controller.handler
    events:
      - httpApi:
          method: '*'
          path: /expense/{param*}

resources:
  Resources:
    BankTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: USERID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: USERID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.bankTable}
    AccountTbale:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: BANKID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: BANKID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.accountTable}
    LimitTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: USERID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: USERID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.limitTable}
    CategoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: USERID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: USERID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.categoryTable}
    ExpenseTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
          - AttributeName: USERID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
          - AttributeName: USERID
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.expenseTable}

plugins:
  - serverless-offline
  - serverless-webpack
  - serverless-dynamodb-local
